#use("Object.kj");

class Float
{
	#atomField(float, ___data, 1);

	met Constructor()
	{
		#inject("movf :*$this->Float/___Data.___data $___ZEROF");
	}

	met Destructor()
	{
		#inject("movf :*$this->Float/___Data.___data $___ZEROF");
	}

	met Add(v)
	{
		#ensureType(v, Float);
		let result = 0.0;
		#inject("movf regf:0 :*$this->Float/___Data.___data");
		#inject("movf regf:1 :*$v->Float/___Data.___data");
		#inject("addf 2 0 1");
		#inject("movf :*$result->Float/___Data.___data regf:2");
		return result;
	}

	met Sub(v)
	{
		#ensureType(v, Float);
		let result = 0.0;
		#inject("movf regf:0 :*$this->Float/___Data.___data");
		#inject("movf regf:1 :*$v->Float/___Data.___data");
		#inject("subf 2 0 1");
		#inject("movf :*$result->Float/___Data.___data regf:2");
		return result;
	}

	met Mul(v)
	{
		#ensureType(v, Float);
		let result = 0.0;
		#inject("movf regf:0 :*$this->Float/___Data.___data");
		#inject("movf regf:1 :*$v->Float/___Data.___data");
		#inject("mulf 2 0 1");
		#inject("movf :*$result->Float/___Data.___data regf:2");
		return result;
	}

	met Div(v)
	{
		#ensureType(v, Float);
		let result = 0.0;
		#inject("movf regf:0 :*$this->Float/___Data.___data");
		#inject("movf regf:1 :*$v->Float/___Data.___data");
		#inject("divf 2 0 1");
		#inject("movf :*$result->Float/___Data.___data regf:2");
		return result;
	}
}
