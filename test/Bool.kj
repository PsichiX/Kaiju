#use("Object.kj");

class Bool
{
	#atomField(int, ___data, 1);

	Constructor()
	{
		#inject("movi :*$this->Bool/___Data.___data $___ZERO");
	}

	Destructor()
	{
		#inject("movi :*$this->Bool/___Data.___data $___ZERO");
	}

	static True()
	{
		return true;
	}

	static False()
	{
		return false;
	}

	Not()
	{
		#inject("movi regi:0 :*$this->Bool/___Data.___data");
		#inject("jifi 0 @___passed @___failed");
		#inject("!jump ___passed");
		return false;
		#inject("!jump ___failed");
		return true;
	}

	And(v)
	{
		#ensureType(v, Bool);
		#inject("movi regi:0 :*$this->Bool/___Data.___data");
		#inject("jifi 0 @___passedA @___failed");
		#inject("!jump ___passedA");
		#inject("movi regi:0 :*$v->Bool/___Data.___data");
		#inject("jifi 0 @___passedB @___failed");
		#inject("!jump ___passedB");
		return true;
		#inject("!jump ___failed");
		return false;
	}

	Or(v)
	{
		#ensureType(v, Bool);
		#inject("movi regi:0 :*$this->Bool/___Data.___data");
		#inject("jifi 0 @___passed @___failedA");
		#inject("!jump ___failedA");
		#inject("movi regi:0 :*$v->Bool/___Data.___data");
		#inject("jifi 0 @___passed @___failedB");
		#inject("!jump ___failedB");
		return false;
		#inject("!jump ___passed");
		return true;
	}
}
