#use("Object.kj");

class Int
{
	#atomField(int, ___data, 1);

	Constructor()
	{
		#inject("movi :*$this->Int/___Data.___data $___ZERO");
	}

	Destructor()
	{
		#inject("movi :*$this->Int/___Data.___data $___ZERO");
	}

	Assign(v)
	{
		#ensureType(v, Int);
		#inject("movi :*$this->Int/___Data.___data :*$v->Int/___Data.___data");
	}

	Add(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("addi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Sub(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("subi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Mul(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("muli 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Div(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("divi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	GreaterThan(v)
	{
		#ensureType(v, Int);
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("tgti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	LessThan(v)
	{
		#ensureType(v, Int);
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("tlti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	EqualTo(v)
	{
		#ensureType(v, Int);
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("teti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	GreaterThanOrEqualTo(v)
	{
		return this.LessThan(v).Not();
	}

	LessThanOrEqualTo(v)
	{
		return this.GreaterThan(v).Not();
	}

	NotEqualTo(v)
	{
		return this.EqualTo(v).Not();
	}

	InRange(start, end)
	{
		return this.LessThan(end).And(this.GreaterThanOrEqualTo(start));
	}

	OutOfRange(start, end)
	{
		return this.LessThan(start).Or(this.GreaterThanOrEqualTo(end));
	}

	ToBool()
	{
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 $___ZERO");
		#inject("tgti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	ToFloat()
	{
		var result = 0.0;
		#inject("itf :*$result->Float/___Data.___data :*$this->Int/___Data.___data");
		return result;
	}

	ToString()
	{
		var result;
		#inject("!data address ___ptr 0");
		#inject("ints STRING");
		#inject("mpsh $this");
		#inject("intc 0");
		#inject("mpop $___ptr");
		#inject("mref $result $___ptr");
		#inject("mfin $___ptr");
		#inject("mdel $___ptr");
		return result;
	}

	static Parse(v)
	{
		#ensureType(v, String);
		var result;
		#inject("!data address ___ptr 0");
		#inject("ints STRING");
		#inject("mpsh $v");
		#inject("intc 1");
		#inject("mpop $___ptr");
		#inject("mref $result $___ptr");
		#inject("mfin $___ptr");
		#inject("mdel $___ptr");
		return result;
	}
}
