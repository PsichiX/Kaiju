#use("Atom.kj");

class Int
{
	#atomField(int, ___data, 1);

	Constructor()
	{
		#inject("movi :*$this->Int/___Data.___data $___ZERO");
	}

	Destructor()
	{
		#inject("movi :*$this->Int/___Data.___data $___ZERO");
	}

	Assign(v)
	{
		#ensureType(v, Int);
		#inject("movi :*$this->Int/___Data.___data :*$v->Int/___Data.___data");
	}

	Add(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("addi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Sub(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("subi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Mul(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("muli 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Div(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("divi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Inc()
	{
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("inci 0 0");
		#inject("movi :*$result->Int/___Data.___data regi:0");
		return result;
	}

	Dec()
	{
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("deci 0 0");
		#inject("movi :*$result->Int/___Data.___data regi:0");
		return result;
	}

	Min(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("mini 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Max(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("maxi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Sqrt()
	{
		var result = 0;
		#inject("movi regf:0 :*$this->Int/___Data.___data");
		#inject("sqti 0 0");
		#inject("movi :*$result->Int/___Data.___data regi:0");
		return result;
	}

	Pow(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("powi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Abs()
	{
		var result = 0;
		#inject("movi regf:0 :*$this->Int/___Data.___data");
		#inject("absi 0 0");
		#inject("movi :*$result->Int/___Data.___data regi:0");
		return result;
	}

	Mod(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("modi 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	Clamp(min, max)
	{
		#ensureType(min, Int);
		#ensureType(max, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$min->Int/___Data.___data");
		#inject("movi regi:2 :*$max->Int/___Data.___data");
		#inject("clpi 3 0 1 2");
		#inject("movi :*$result->Int/___Data.___data regi:3");
		return result;
	}

	BitNot()
	{
		var result = 0;
		#inject("movi regf:0 :*$this->Int/___Data.___data");
		#inject("not 0 0");
		#inject("movi :*$result->Int/___Data.___data regi:0");
		return result;
	}

	BitAnd(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("and 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	BitOr(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("or 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	BitXor(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("xor 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	BitShiftL(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("bshl 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	BitShiftR(v)
	{
		#ensureType(v, Int);
		var result = 0;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("bshr 2 0 1");
		#inject("movi :*$result->Int/___Data.___data regi:2");
		return result;
	}

	GreaterThan(v)
	{
		#ensureType(v, Int);
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("tgti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	LessThan(v)
	{
		#ensureType(v, Int);
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("tlti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	EqualTo(v)
	{
		#ensureType(v, Int);
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 :*$v->Int/___Data.___data");
		#inject("teti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	GreaterThanOrEqualTo(v)
	{
		return this.LessThan(v).Not();
	}

	LessThanOrEqualTo(v)
	{
		return this.GreaterThan(v).Not();
	}

	NotEqualTo(v)
	{
		return this.EqualTo(v).Not();
	}

	InRange(start, end)
	{
		return this.LessThan(end).And(this.GreaterThanOrEqualTo(start));
	}

	OutOfRange(start, end)
	{
		return this.LessThan(start).Or(this.GreaterThanOrEqualTo(end));
	}

	ToBool()
	{
		var result = false;
		#inject("movi regi:0 :*$this->Int/___Data.___data");
		#inject("movi regi:1 $___ZERO");
		#inject("tgti 2 0 1");
		#inject("movi :*$result->Bool/___Data.___data regi:2");
		return result;
	}

	ToFloat()
	{
		var result = 0.0;
		#inject("itf :*$result->Float/___Data.___data :*$this->Int/___Data.___data");
		return result;
	}

	ToString()
	{
		var result;
		#inject("!data address ___ptr 0");
		#inject("ints STRING");
		#inject("mpsh $this");
		#inject("intc 0");
		#inject("mpop $___ptr");
		#inject("mref $result $___ptr");
		#inject("mfin $___ptr");
		#inject("mdel $___ptr");
		return result;
	}
}
